'''
Code for the implementation of
"Spatially-Variant CNN-based Point Spread Function Estimation for Blind Deconvolution and Depth Estimation in Optical Microscopy"

Copyright (c) 2020 Idiap Research Institute, https://www.idiap.ch/
Written by Adrian Shajkofci <adrian.shajkofci@idiap.ch>,
All rights reserved.

This file is part of Spatially-Variant CNN-based Point Spread Function Estimation.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the name of mosquitto nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
'''


import numpy as np
from matplotlib import pyplot as plt
import pandas
import glob
import matplotlib

# This file is generated by test_noise for different types of noise
list_files = glob.glob('results_noise*.csv')

# Every type of noise has one file
for file in list_files:
    try:
        df2 = pandas.read_csv(file)
    except:
        df2 = None

    data = {}
    for idx in range(len(df2)):
        #if '2dgaussian' == df2['dataset_trained'][idx]:
        #    focus = df2['fwmhx'][idx] + df2['fwmhy'][idx]
        #    focus /=2
        #elif '2dzernike' == df2['dataset_trained'][idx]:
        #    focus = df2['focus'][idx] + df2['ast'][idx] + df2['ast_angle'][idx]
        #    focus /= 3
        #else:
        focus = df2['focus'][idx]

        name = "{}_{}_{}_n_{}_s_{}_p_{}_b_{}".format(df2['run'][idx] , df2['model'][idx] , df2['dataset_trained'][idx] , df2['train_natural'][idx],  df2['train_synthetic'][idx] , df2['train_points'][idx] ,  df2['train_black'][idx])
        if name not in data:
            data2 = {}
        else:
            data2 = data[name]
        if 'noisedata' not in data2:
            data2['noisedata'] = []
            data2['noisevar'] = []

        data2['noisedata'].append((df2['noise'][idx], focus))
        data2['noisedata'] = sorted(data2['noisedata'], key=lambda tup: tup[0])

        data2['noisevar'].append((df2['noise'][idx], df2['variance'][idx] / 20.0))
        data2['noisevar'] = sorted(data2['noisevar'], key=lambda tup: tup[0])

        data.update({name: data2})
    data_array = []

    for idx, value in enumerate(data):
        for i in data[value]['noisedata']:
            data[value].update({i[0]:i[1]})
        data[value]['name'] = value+'_mean'
        u = data[value].copy()
        u.pop('noisedata')
        u.pop('noisevar')
        data_array.append(u)
        for i in data[value]['noisevar']:
            data[value].update({i[0]: i[1]})
        data[value]['name'] = value + '_variance'
        data[value].pop('noisedata')
        data[value].pop('noisevar')
        data_array.append(data[value])

    df = pandas.DataFrame(data_array)
    cols = df.columns.tolist()
    cols = cols[-1:] + cols[:-1]
    df = df[cols]

    dfarr = df.values
    dfindex = df.columns.values[1:].astype(np.float)
    plt.rc('text', usetex=True)
    f = plt.figure(figsize=(4,3), dpi=400)
    font = {'family': 'Times New Roman',
            'weight': 'normal',
            'size': 19}

    matplotlib.rc('font', **font)

    legends = []
    for i in range(dfarr.shape[0]//2):
        name_mean = dfarr[2*i, 0]
        name_var = dfarr[2*i+1, 0]
        a = ['606','255','157']
        if  any(u in name_mean for u in a):
            pass

        print(name_mean)
        legends.append(name_mean.split('_')[0])
        mean = np.clip((dfarr[2*i, 1:]).astype(np.float), 0, 1.0)
        var = (dfarr[2*i+1, 1:]).astype(np.float)/2
        assert(len(dfindex) == len(mean))
        plt.plot(dfindex, mean, '.-')

    for y in np.arange(0, 1, 0.1):
        plt.plot(dfindex, [y] * len(dfindex), "--", lw=0.5, color="black", alpha=0.3)

    ax = plt.gca()
    ax.locator_params(tight=True, axis='x', nbins=2)
    ax.locator_params(axis='y', nbins=1)

    if 'poigauss' in file:
        plt.xlabel('Degradation strength')
    else:
        for n, label in enumerate(ax.xaxis.get_ticklabels()):
            label.set_visible(False)
    plt.ylim(0, 1)
    plt.xlim(0.0, 1.0)

    f.canvas.set_window_title(file)
    plt.tight_layout()
    plt.gcf().subplots_adjust(bottom=0.45, right=0.85)
    plt.savefig('{}{}'.format(file,'.png'))

plt.show()